<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Nexus Dashboard</title>
        <link
            href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
            rel="stylesheet"
        />
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/socket.io-client/dist/socket.io.min.js"></script>
        <style>
            :root {
                --primary-color: #1a237e;
                --secondary-color: #6efff5;
            }
            body {
                background-color: #f0f2f5;
                color: #333;
            }
            .bg-primary {
                background-color: var(--primary-color);
            }
            .bg-secondary {
                background-color: var(--secondary-color);
            }
            .text-primary {
                color: var(--primary-color);
            }
            .text-secondary {
                color: var(--secondary-color);
            }
            .border-primary {
                border-color: var(--primary-color);
            }
            .border-secondary {
                border-color: var(--secondary-color);
            }
            .log-info {
                color: #4a90e2;
            }
            .log-warning {
                color: #f39c12;
            }
            .log-error {
                color: #e74c3c;
            }
            .log-success {
                color: #2ecc71;
            }
        </style>
    </head>
    <body>
        <header class="bg-primary text-white p-4">
            <div class="container mx-auto flex justify-between items-center">
                <h1 class="text-3xl font-bold">Nexus Dashboard</h1>
              
            </div>
        </header>

        <main class="container mx-auto mt-8 p-4">
            <section id="authSection" class="mb-8 bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-bold mb-4 text-primary">Authentication</h2>
                <div id="loginForm" class="space-y-4">
                    <input
                        type="email"
                        id="email"
                        placeholder="Email"
                        class="w-full p-2 border rounded"
                    />
                    <input
                        type="password"
                        id="password"
                        placeholder="Password"
                        class="w-full p-2 border rounded"
                    />
                    <button
                        onclick="login()"
                        class="bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90 transition-colors"
                    >
                        Login
                    </button>
                    <button
                        onclick="signup()"
                        class="bg-secondary text-primary px-4 py-2 rounded hover:bg-opacity-90 transition-colors"
                    >
                        Sign Up
                    </button>
                </div>
            </section>

            <section id="taskSection" class="mb-8 bg-white rounded-lg shadow-md p-6 hidden">
                <h2 class="text-2xl font-bold mb-4 text-primary">Task Initiation</h2>
                <form id="taskForm" class="space-y-4">
                    <div>
                        <label for="taskInput" class="block text-sm font-medium text-gray-700"
                            >Task Description:</label
                        >
                        <textarea
                            id="taskInput"
                            name="taskInput"
                            rows="4"
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
                        ></textarea>
                    </div>
                    <div>
                        <label for="modelSelect" class="block text-sm font-medium text-gray-700"
                            >Select Model:</label
                        >
                        <select
                            id="modelSelect"
                            name="modelSelect"
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
                        >
                            <option value="gpt-4">GPT-4</option>
                            <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                            <option value="gemini-pro">Gemini Pro</option>
                            <option value="claude-3-sonnet-20240229">Claude 3 sonnet</option>
                            <option value="together-ai-model">Together AI Model</option>
                        </select>
                    </div>
                    <div>
                        <button
                            type="submit"
                            class="bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90 transition-colors"
                        >
                            Start Task
                        </button>
                    </div>
                </form>
            </section>

            <section id="progressSection" class="mb-8 bg-white rounded-lg shadow-md p-6 hidden">
                <h2 class="text-2xl font-bold mb-4 text-primary">Task Progress</h2>
                <div id="taskProgress" class="bg-gray-100 p-4 rounded">
                    <p>No active task</p>
                </div>
            </section>

            <section id="subTasksSection" class="mb-8 bg-white rounded-lg shadow-md p-6 hidden">
                <h2 class="text-2xl font-bold mb-4 text-primary">Sub-Tasks</h2>
                <ul id="subTasksList" class="list-disc pl-5"></ul>
            </section>

            <section id="logsSection" class="mb-8 bg-white rounded-lg shadow-md p-6 hidden">
                <h2 class="text-2xl font-bold mb-4 text-primary">Sub-Agent Logs</h2>
                <div id="subAgentLogs" class="bg-gray-100 p-4 rounded h-64 overflow-y-auto"></div>
            </section>

            <section id="statsSection" class="mb-8 bg-white rounded-lg shadow-md p-6 hidden">
                <h2 class="text-2xl font-bold mb-4 text-primary">Statistics</h2>
                <div id="statistics" class="bg-gray-100 p-4 rounded">
                    <canvas id="statisticsChart"></canvas>
                </div>
            </section>

            <section id="artifactsSection" class="mb-8 bg-white rounded-lg shadow-md p-6 hidden">
                <h2 class="text-2xl font-bold mb-4 text-primary">Artifacts</h2>
                <div id="artifacts" class="bg-gray-100 p-4 rounded">
                    <ul id="artifactList" class="list-disc pl-5"></ul>
                </div>
            </section>
        </main>

        <script>
            const taskForm = document.getElementById('taskForm');
            const taskProgress = document.getElementById('taskProgress');
            const subTasksList = document.getElementById('subTasksList');
            const subAgentLogs = document.getElementById('subAgentLogs');
            const statisticsChart = document.getElementById('statisticsChart');
            const artifactList = document.getElementById('artifactList');
            const authSection = document.getElementById('authSection');
            const taskSection = document.getElementById('taskSection');
            const progressSection = document.getElementById('progressSection');
            const subTasksSection = document.getElementById('subTasksSection');
            const logsSection = document.getElementById('logsSection');
            const statsSection = document.getElementById('statsSection');
            const artifactsSection = document.getElementById('artifactsSection');

            let chart;
            let token;
            let socket;

            async function login() {
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;
                try {
                    const response = await axios.post('/api/auth/login', { email, password });
                    token = response.data.token;
                    localStorage.setItem('token', token);
                    showDashboard();
                } catch (error) {
                    console.error('Login error:', error);
                    alert('Login failed. Please try again.');
                }
            }

            async function signup() {
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;
                try {
                    const response = await axios.post('/api/auth/register', { email, password });
                    token = response.data.token;
                    localStorage.setItem('token', token);
                    showDashboard();
                } catch (error) {
                    console.error('Signup error:', error);
                    alert('Signup failed. Please try again.');
                }
            }

            function showDashboard() {
                authSection.classList.add('hidden');
                taskSection.classList.remove('hidden');
                progressSection.classList.remove('hidden');
                subTasksSection.classList.remove('hidden');
                logsSection.classList.remove('hidden');
                statsSection.classList.remove('hidden');
                artifactsSection.classList.remove('hidden');
                fetchUserInfo();
                fetchArtifacts();
                initializeSocket();
            }

            function initializeSocket() {
                socket = io();
                socket.on('taskProgressUpdate', updateTaskProgress);
                socket.on('subAgentLogUpdate', addSubAgentLog);
                socket.on('subTasksUpdate', updateSubTasks);
                socket.on('statisticsUpdate', updateStatisticsChart);
                socket.on('artifactUpdate', fetchArtifacts);
            }

            taskForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const taskInput = document.getElementById('taskInput').value;
                const modelSelect = document.getElementById('modelSelect').value;
                try {
                    const response = await axios.post(
                        '/api/execute-tool',
                        {
                            toolName: 'initiate_task',
                            params: { taskDescription: taskInput, model: modelSelect }
                        },
                        {
                            headers: { Authorization: `Bearer ${token}` }
                        }
                    );
                    updateTaskProgress(response.data.result);
                } catch (error) {
                    console.error('Error initiating task:', error);
                    taskProgress.innerHTML = '<p class="text-red-600">Error initiating task</p>';
                }
            });

            function updateTaskProgress(progress) {
                taskProgress.innerHTML = `<p>${progress}</p>`;
            }

            function updateSubTasks(subTasks) {
                subTasksList.innerHTML = '';
                subTasks.forEach((subTask) => {
                    const li = document.createElement('li');
                    li.textContent = subTask;
                    subTasksList.appendChild(li);
                });
            }

            function addSubAgentLog(log) {
                const logElement = document.createElement('p');
                logElement.textContent = log;
                if (log.includes('INFO')) {
                    logElement.classList.add('log-info');
                } else if (log.includes('WARNING')) {
                    logElement.classList.add('log-warning');
                } else if (log.includes('ERROR')) {
                    logElement.classList.add('log-error');
                } else if (log.includes('SUCCESS')) {
                    logElement.classList.add('log-success');
                }
                subAgentLogs.appendChild(logElement);
                subAgentLogs.scrollTop = subAgentLogs.scrollHeight;
            }

            async function fetchUserInfo() {
                try {
                    const response = await axios.get('/api/user/info', {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    const userInfo = response.data;
                    updateStatisticsChart(userInfo);
                } catch (error) {
                    console.error('Error fetching user info:', error);
                    statisticsChart.innerHTML =
                        '<p class="text-red-600">Error loading statistics</p>';
                }
            }

            function updateStatisticsChart(userInfo) {
                const ctx = statisticsChart.getContext('2d');
                if (chart) {
                    chart.destroy();
                }
                chart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ['Total Tasks', 'Completed Tasks'],
                        datasets: [
                            {
                                label: 'Task Statistics',
                                data: [userInfo?.totalTasks || 0, userInfo?.completedTasks || 0],
                                backgroundColor: [
                                    'rgba(246, 98, 186, 0.5)',
                                    'rgba(110, 255, 245, 0.5)'
                                ],
                                borderColor: ['rgba(246, 98, 186, 1)', 'rgba(110, 255, 245, 1)'],
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            async function fetchArtifacts() {
                try {
                    const response = await axios.get('/api/artifacts', {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    const artifacts = response.data;
                    updateArtifactList(artifacts);
                } catch (error) {
                    console.error('Error fetching artifacts:', error);
                    artifactList.innerHTML =
                        '<li class="text-red-600">Error loading artifacts</li>';
                }
            }

            function updateArtifactList(artifacts) {
                artifactList.innerHTML = '';
                artifacts.forEach((artifact) => {
                    const li = document.createElement('li');
                    li.textContent = `${artifact.name} (${artifact.type})`;
                    artifactList.appendChild(li);
                });
            }

            token = localStorage.getItem('token');
            if (token) {
                showDashboard();
            }

            setInterval(() => {
                fetchUserInfo();
                fetchArtifacts();
            }, 30000);
        </script>
    </body>
</html>
